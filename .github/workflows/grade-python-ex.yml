
# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python grader

on: [push]

permissions:
  contents: write

jobs:
  grading:

    runs-on: ubuntu-latest

    steps:

    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"

    - name: Cache Python packages
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest svgwrite
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      continue-on-error: true
      run: |
        if [ -f ./.python/results.xml ]; then rm ./.python/results.xml ; fi
        pytest .python/test_.py --junitxml=results.xml

    - name: Grade
      id: python-grade
      run: |
        echo "GRADE=$(python .python/grade.py)" >> $GITHUB_ENV        
        echo $GRADE

    - name: Build Progress Bar
      id: build-progress-bar
      run: |
        python .python/build_progress_bar.py

    - name: Commit and push changes
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

        git config pull.rebase false

        if git diff --cached --exit-code; then
          echo "No changes detected"
          exit 0
        else
          echo "Changes detected"
          git add ./.python/progress_bar.svg
          git commit -m "Update progress bar"
          git push
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}